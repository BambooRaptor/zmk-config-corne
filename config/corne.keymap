/*
 * Copyright (c) 2020 The ZMK Contributors
 *
 * SPDX-License-Identifier: MIT
 */

#include <behaviors.dtsi>
#include <dt-bindings/zmk/bt.h>
#include <dt-bindings/zmk/keys.h>

/ {
    combos { compatible = "zmk,combos"; };

    keymap {
        compatible = "zmk,keymap";

        default_layer {
            // -----------------------------------------------------------------------------------------
            // |  TAB |  Q  |  W  |  E  |  R  |  T  |   |  Y  |  U   |  I  |  O  |  P  | BKSP |
            // | CTRL |  A  |  S  |  D  |  F  |  G  |   |  H  |  J   |  K  |  L  |  ;  |  '   |
            // | SHFT |  Z  |  X  |  C  |  V  |  B  |   |  N  |  M   |  ,  |  .  |  /  | ESC  |
            //                    | GUI | LWR | SPC |   | ENT | RSE  | ALT |

            bindings = <
&none  &kp Q  &kp W  &kp E         &kp R  &kp T        &kp Y           &kp U  &kp I             &kp O             &kp P          &none
&none  &kp A  &kp S  &kp D         &kp F  &kp G        &kp H           &kp J  &kp K             &kp L             &kp BACKSPACE  &none
&none  &kp Z  &kp X  &kp C         &kp V  &kp B        &kp N           &kp M  &kp LEFT_ALT      &kp LEFT_CONTROL  &kp LEFT_WIN   &none
                     &kp LEFT_ALT  &mo 1  &kp SPACE    &kp LEFT_SHIFT  &mo 2  &kp LEFT_CONTROL
            >;
        };

        lower_layer {
            // -----------------------------------------------------------------------------------------
            // |  TAB |  1  |  2  |  3  |  4  |  5  |   |  6  |  7  |  8  |  9  |  0  | BKSP |
            // | BTCLR| BT1 | BT2 | BT3 | BT4 | BT5 |   | LFT | DWN |  UP | RGT |     |      |
            // | SHFT |     |     |     |     |     |   |     |     |     |     |     |      |
            //                    | GUI |     | SPC |   | ENT |     | ALT |

            bindings = <
&none  &kp ESCAPE  &none     &kp RET    &kp FSLH  &kp GRAVE    &kp N1     &kp N2     &kp N3     &kp N4    &kp N5    &none
&none  &kp LSHFT   &none     &kp COMMA  &kp DOT   &kp SEMI     &kp N6     &kp N7     &kp N8     &kp N9    &kp N0    &none
&none  &kp LCTRL   &kp LALT  &kp LGUI   &none     &none        &kp MINUS  &kp EQUAL  &kp LBKT   &kp RBKT  &kp BSLH  &none
                             &kp LALT   &mo 1     &kp SPACE    &kp RET    &mo 2      &kp LCTRL
            >;
        };

        raise_layer {
            // -----------------------------------------------------------------------------------------
            // |  TAB |  !  |  @  |  #  |  $  |  %  |   |  ^  |  &  |  *  |  (  |  )  | BKSP |
            // | CTRL |     |     |     |     |     |   |  -  |  =  |  [  |  ]  |  \  |  `   |
            // | SHFT |     |     |     |     |     |   |  _  |  +  |  {  |  }  | "|" |  ~   |
            //                    | GUI |     | SPC |   | ENT |     | ALT |

            bindings = <
&none  &kp F1  &kp F2   &kp F3    &kp F4   &kp END       &kp DEL    &none     &kp UP     &none      &kp TAB   &none
&none  &kp F5  &kp F6   &kp F7    &kp F8   &kp PG_UP     &kp PG_DN  &kp LEFT  &kp DOWN   &kp RIGHT  &kp RET   &none
&none  &kp F9  &kp F10  &kp F11   &kp F12  &kp INSERT    &kp HOME   &none     &kp LALT   &kp LCTRL  &kp LGUI  &none
                        &kp LALT  &mo 1    &kp RET       &kp RET    &mo 2     &kp LCTRL
            >;
        };

        raise_and_lower {
            bindings = <
&trans  &trans  &trans  &trans  &trans  &trans    &bt BT_SEL 0  &bt BT_SEL 1  &bt BT_SEL 2  &bt BT_SEL 3  &bt BT_SEL 4  &trans
&trans  &trans  &trans  &trans  &kp N0  &mo 4     &trans        &trans        &trans        &trans        &trans        &trans
&trans  &trans  &trans  &trans  &trans  &trans    &bt BT_CLR    &trans        &trans        &trans        &trans        &trans
                        &trans  &mo 1   &trans    &trans        &mo 2         &trans
            >;
        };

        bt_discc {
            bindings = <
&trans  &trans  &trans  &trans  &trans  &trans    &bt BT_DISC 0  &bt BT_DISC 1  &bt BT_DISC 2  &bt BT_DISC 3  &bt BT_DISC 4  &trans
&trans  &trans  &trans  &trans  &trans  &trans    &kp NUMBER_1   &trans         &trans         &trans         &trans         &trans
&trans  &trans  &trans  &trans  &trans  &trans    &trans         &trans         &trans         &trans         &trans         &trans
                        &trans  &trans  &trans    &trans         &trans         &trans
            >;
        };
    };

    conditional_layers {
        compatible = "zmk,conditional-layers";

        raise_and_lower {
            if-layers = <1 2>;
            then-layer = <3>;
        };
    };
};
